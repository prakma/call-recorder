apply plugin: 'com.android.application'
apply plugin: 'com.github.axet.dxplugin'

android {
    //compileSdkVersion 28
    compileSdkVersion 28
//    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "mp.artemiscaller"
        minSdkVersion 23
        targetSdkVersion 23
        versionCode 2012
        versionName "2.0.12"
        // read artemiscaller.properties file from project root folder
        buildConfigField 'java.util.HashMap<String, String>', 'PropertyPairs', makePropertyHashMap(getRootDir().getPath() + File.separator + 'app/artemiscaller.properties')
    }
    signingConfigs {
        release {
            storeFile file(prop('RELEASE_STORE_FILE') ?: 'none')
            storePassword prop('RELEASE_STORE_PASSWORD')
            keyAlias prop('RELEASE_KEY_ALIAS')
            keyPassword prop('RELEASE_KEY_PASSWORD')
        }
    }
    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            minifyEnabled false
        }
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFileName = org.apache.commons.io.FilenameUtils.getExtension(android.defaultConfig.applicationId) + "-" + (output.getFilter(com.android.build.OutputFile.ABI) ?: "universal") + "-" + android.defaultConfig.versionName + "-" + variant.buildType.name + ".apk"
        }
    }
    bundle {
        abi {
            enableSplit = true
        }
    }
    splits {
        abi {
            enable false
            universalApk true
        }
    }
}

def surveys = project.file('src/main/res/raw/surveys.csv')

task fetch() {
    def url = 'https://docs.google.com/spreadsheets/d/1C6HuLIk3k4SmAYEuKOnQynGEPM39rjlu90oX7bYbqLk/gviz/tq?gid=1685986704&tqx=out:csv'
    if (!surveys.exists())
        new URL(url).withInputStream { i -> surveys.withOutputStream { it << i } }
}

def makePropertyHashMap(filename) {
    def artemisProperties = new Properties()
    try {
        artemisProperties.load(new FileInputStream(file(filename)))
        System.out.println("properties filename "+filename);
    } catch (FileNotFoundException e) {
        artemisProperties = null
        System.err.println('artemisProperties value is null'+filename)
    }

    // result example: new Hashtable<String, Boolean>(){{ put(true, "a"); }};
    def prefix = 'new java.util.HashMap<String, String>(){{ '
    def suffix = '}}'
    def value = ''
    if (artemisProperties != null) {
        for (d in artemisProperties) {
            value += String.format('put("%s","%s"); ', d.key, d.value)
        }
    }

    return String.format('%s%s%s', prefix, value, suffix)
}

clean.doLast {
    surveys.delete()
}

preBuild.dependsOn fetch

dependencies {
    implementation 'com.github.axet:android-audio-library:1.0.167'
    // implementation project(':android-audio-library')
    implementation "org.apache.commons:commons-csv:1.5"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.annotation:annotation:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    assets('com.google.android.exoplayer:exoplayer:2.7.3') { exclude group: 'com.android.support' }
    // Add the SDK for Firebase Cloud Messaging
    implementation 'com.google.firebase:firebase-messaging:20.0.0'
    implementation("com.squareup.okhttp3:okhttp:4.2.1")

    // Add the WorkManager dependency
    // (Java only)
    implementation "androidx.work:work-runtime:2.2.0"


    // Bugfender debugging library
    implementation 'com.bugfender.sdk:android:3.+'

    // libraries to enable upload to S3
    // implementation 'com.amazonaws:aws-android-sdk-cognito:2.2.+'
    implementation 'com.amazonaws:aws-android-sdk-s3:2.6.+'





}

apply plugin: 'com.google.gms.google-services'  // Google Play services Gradle plugin

